// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  firstName      String
  lastName       String
  username       String     @unique
  email          String     @unique
  passwordHash   String
  verificationLink String?
  referredBy     String?    // stores the referralCode of another user
  isVerified     Boolean    @default(false)
  isAdmin        Boolean    @default(false)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations
  referralsMade  Referral[] @relation("ReferralsMade")
  referralsReceived Referral[] @relation("ReferralsReceived")
  earnings       Earning[]
  withdrawals    Withdrawal[]
  adminLogs      AdminLog[] @relation("AdminLogs")
  notifications Notification[]
  transaction Transaction[] 
  deposit        Deposit[] 
  otp            Otp[]

}

model Referral {
  id            String   @id @default(uuid())
  referrerId    String
  refereeId     String
  clickIp       String?
  clickedAt     DateTime?
  registeredAt  DateTime?

  referrer      User     @relation("ReferralsMade", fields: [referrerId], references: [id])
  referee       User     @relation("ReferralsReceived", fields: [refereeId], references: [id])

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Earning {
  id          String   @id @default(uuid())
  userId      String
  sourceUser  String?
  amount      Decimal?  @db.Decimal(10, 2) @default(5000)
  type        EarningType
  status      EarningStatus @default(pending)

  user        User     @relation(fields: [userId], references: [id])

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Otp {
  id        String   @id @default(uuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}
model Withdrawal {
  id           String   @id @default(uuid())
  userId       String
  amount       Decimal  @db.Decimal(10, 2)
  method       String
  accountInfo  Json
  status       WithdrawalStatus @default(pending)
  requestedAt  DateTime @default(now())
  processedAt  DateTime?

  user         User     @relation(fields: [userId], references: [id])

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}


model Deposit {
  id           String   @id @default(uuid())
  userId       String
  amount       Decimal  @db.Decimal(10, 2)
  accountInfo  Json?
  requestedAt  DateTime @default(now())
  processedAt  DateTime?

  user         User     @relation(fields: [userId], references: [id])

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model CommissionSetting {
  id         String   @id @default(uuid())
  type       CommissionType
  amount     Decimal  @db.Decimal(10, 2)
  isPercent  Boolean
  active     Boolean  @default(true)

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model AdminLog {
  id         String   @id @default(uuid())
  adminId    String
  action     String
  metadata   Json?

  admin      User     @relation("AdminLogs", fields: [adminId], references: [id])
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Notification {
  id        String    @id @default(uuid())
  userId    String
  title     String
  body      String    @db.Text
  read      Boolean   @default(false)
  createdAt DateTime  @default(now())
  isDeleted Boolean?
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model Transaction {
  id                String            @id @default(uuid())
  userId            String?
  amount            Decimal
  type              TransactionType
  status            TransactionStatus
  reference         String            @unique
  metadata          Json?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime   @updatedAt

  isDeleted         Boolean?
  deletedAt         DateTime?
  narration         String?

  user            User?             @relation( fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum EarningType {
  signup
  purchase
  bonus
}

enum EarningStatus {
  pending
  confirmed
  revoked
}

enum WithdrawalStatus {
  pending
  approved
  rejected
}

enum CommissionType {
  signup
  purchase
}

enum TransactionStatus {
  pending
  completed
  failed
}

enum TransactionType {
  deposit
  withdraw
}